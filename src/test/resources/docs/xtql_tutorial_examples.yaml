bo-sql-1: |
  -- tag::bo-sql-1[]
  SELECT users.xt$id AS user_id, users.first_name, users.last_name FROM users
  -- end::bo-sql-1[]

bo-sql-2: |
  -- tag::bo-sql-2[]
  SELECT users.first_name, users.last_name FROM users WHERE users.xt$id = 'ivan'
  -- end::bo-sql-2[]

bo-sql-3: |
  -- tag::bo-sql-3[]
  SELECT users.xt$id AS user_id, users.first_name, users.last_name
  FROM users
  ORDER BY last_name, first_name
  LIMIT 10
  -- end::bo-sql-3[]

joins-sql-1: |
  -- tag::joins-sql-1[]
  SELECT u.xt$id AS user_id, u.first_name, u.last_name, a.title, a.content
  FROM users u JOIN articles a ON u.xt$id = a.author_id
  -- end::joins-sql-1[]

joins-sql-2: |
  -- tag::joins-sql-2[]
  SELECT u1.xt$id AS uid1, u2.xt$id AS uid2, u1.age
  FROM users u1
    JOIN users u2 ON (u1.age = u2.age)
  WHERE u1.xt$id <> u2.xt$id
  -- end::joins-sql-2[]

joins-sql-3: |
  -- tag::joins-sql-3[]
  SELECT c.xt$id AS cid, o.currency, o.order_value
  FROM customers c
    LEFT JOIN orders o ON (c.xt$id = o.customer_id)
  LIMIT 100
  -- end::joins-sql-3[]

joins-sql-4: |
  -- tag::joins-sql-4[]
  SELECT c.xt$id AS cid
  FROM customers c
  WHERE c.xt$id NOT IN (SELECT orders.customer_id FROM orders)
  LIMIT 100
  -- end::joins-sql-4[]

proj-sql-1: |
  -- tag::proj-sql-1[]
  SELECT u.first_name, u.last_name, (u.first_name || ' ' || u.last_name) AS full_name
  FROM users AS u
  -- end::proj-sql-1[]

proj-sql-2: |
  -- tag::proj-sql-2[]
  SELECT (u.first_name || ' ' || u.last_name) AS full_name, a.title, a.content
  FROM users AS u
    JOIN articles a ON u.xt$id = a.author_id
  -- end::proj-sql-2[]

proj-sql-3: |
  -- tag::proj-sql-3[]
  SELECT u.first_name, u.last_name, a.title, a.content
  FROM users AS u
    JOIN articles a ON u.xt$id = a.author_id
  -- end::proj-sql-3[]

aggr-sql-1: |
  -- tag::aggr-sql-1[]
  SELECT c.xt$id AS cid, o.currency, COUNT(o.xt$id) AS order_count, COALESCE(SUM(o.order_value), 0) AS total_value
  FROM customers c
    LEFT JOIN orders o ON (c.xt$id = o.customer_id)
  GROUP BY c.xt$id, o.currency
  ORDER BY total_value DESC
  LIMIT 100
  -- end::aggr-sql-1[]

bitemp-sql-1: |
  -- tag::bitemp-sql-1[]
  SELECT users.first_name, users.last_name FROM users FOR VALID_TIME AS OF DATE '2020-01-01'
  -- end::bitemp-sql-1[]

bitemp-sql-2: |
  -- tag::bitemp-sql-2[]
  SELECT users.first_name, users.last_name FROM users FOR ALL VALID_TIME
  -- end::bitemp-sql-2[]

DML-Insert-sql: |
  -- tag::DML-Insert-sql[]
  INSERT INTO users
  SELECT ou.xt$id, ou.given_name AS first_name, ou.surname AS last_name,
         ou.xt$valid_from, ou.xt$valid_to
  FROM old_users AS ou
  -- end::DML-Insert-sql[]

DML-Delete-sql: |
  -- tag::DML-Delete-sql[]
  DELETE FROM comments WHERE comments.post_id = ?
  -- end::DML-Delete-sql[]

DML-Delete-additional-unify-clauses-sql: |
  -- tag::DML-Delete-additional-unify-clauses-sql[]
  DELETE FROM comments
  WHERE comments.post_id IN (SELECT posts.xt$id FROM posts WHERE posts.author_id = ?)
  -- end::DML-Delete-additional-unify-clauses-sql[]

DML-Delete-bitemporal-sql: |
  -- tag::DML-Delete-bitemporal-sql[]
  DELETE FROM promotions
  FOR PORTION OF VALID_TIME FROM DATE '2023-12-26' TO END_OF_TIME
  WHERE promotions.promotion_type = 'christmas'
  -- end::DML-Delete-bitemporal-sql[]

DML-Delete-everything-sql: |
  -- tag::DML-Delete-everything-sql[]
  DELETE FROM comments
  -- end::DML-Delete-everything-sql[]

DML-Update-sql: |
  -- tag::DML-Update-sql[]
  UPDATE documents
  SET version = documents.version + 1
  WHERE documents.xt$id = ?
  -- end::DML-Update-sql[]

DML-Update-bitemporal-sql-1: |
  -- tag::DML-Update-bitemporal-sql-1[]
  INSERT INTO comments (xt$id, post_id) VALUES (?, ?)
  -- end::DML-Update-bitemporal-sql-1[]

DML-Update-bitemporal-sql-2: |
  -- tag::DML-Update-bitemporal-sql-2[]
  UPDATE posts AS p
  SET comment_count = (SELECT COUNT(*) FROM comments WHERE comments.post_id = ?)
  WHERE p.post_id = ?
  -- end::DML-Update-bitemporal-sql-2[]

DML-Erase-sql: |
  -- tag::DML-Erase-sql[]
  ERASE FROM users WHERE users.email = 'jms@example.com'
  -- end::DML-Erase-sql[]

DML-Assert-Not-sql: |
  -- tag::DML-Assert-sql[]
  ASSERT NOT EXISTS (SELECT 1 FROM users WHERE email = 'james@juxt.pro')
  -- end::DML-Assert-sql[]

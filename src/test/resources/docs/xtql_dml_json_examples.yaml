put-docs-json: |
  // tag::put-docs-json[]
  {
    // -- required

    // array of documents to put, each of which must contain `xt$id`.
    "putDocs": [ { "xt$id" : 1, "foo" : "bar" },  ...],

    // table to insert into
    "into": "docs",

    // -- optional

    // Defaults to the current time of the transaction if not provided.
    // "validFrom": "2023-01-01T00:00:00Z",

    // Defaults to the end-of-time if not provided.
    // "validTo": "2024-01-01T00:00:00Z"
  }
  // end::put-docs-json[]

delete-docs-json: |
  // tag::delete-docs-json[]
  {
    // -- required

    // array of ids to delete.
    "deleteDocs": [ 1, "alan" ],

    // table to delete from
    "from": "docs",

    // -- optional

    // Defaults to the current time of the transaction if not provided.
    // "validFrom": "2023-01-01T00:00:00Z",

    // Defaults to the end-of-time if not provided.
    // "validTo": "2024-01-01T00:00:00Z"
  }
  // end::delete-docs-json[]

erase-docs-json: |
  // tag::erase-docs-json[]
  {
    // -- required

    // array of ids to erase.
    "eraseDocs": [ 1, "alan" ]

    // table to erase from
    "from": "docs",
  }
  // end::erase-docs-json[]

insert-into-json: |
  // tag::insert-into-json[]
  {
    // -- required

    // table to insert into.
    "insertInto": "users",

    // XTQL query
    // * must yield an `xt$id` column
    // * may yield `xt$validFrom`/`xt$validTo` to set validity period
    //   otherwise, defaults as per 'put'
    "query": [ ... ]
  }
  // end::insert-into-json[]

insert-into-json-ex1: |
  // tag::insert-into-json-ex1[]
  {
    "insertInto": "users",

    "query": {
      "from": "oldUsers",
      "bind": [
        "xt$id"
        { "firstName": { "xt:lvar": "givenName" } },
        { "lastName": { "xt:lvar": "familyName" } }
      ]
    }
  }
  // end::insert-into-json-ex1[]

update-json: |
  // tag::update-json[]
  {
    // -- required

    // table to update
    "update": "users",

    // -- optional

    // the valid time period to update the rows for
    // * see 'temporal filters'

    // "forValidTime": { "from" : "2024-01-01T00:00:00Z" },

    // binding specs - selects the documents to update
    // * if not provided, will update every document in the table
    // * see 'binding specs'
    // * may also bind extra logic variables for use in the `set` or `unify` clauses.

    "bind": [ { "email": { "xt:param": "$email" } }, "version" ],

    // -- required

    // columns to update (array of maps, string -> expression)
    // * see 'expressions'
    // * altering any `xt$...` column in set will result in an error.

    "set": [
      { "version": { "xt:call": "+", "args": [ { "xt:lvar": "version" }, 1 ] } }
    ],

    // -- optional

    // extra clauses to unify with (e.g. to join against another table)
    // * see 'unify' for more details.

    // "unify": [ ... ],

    // argument-rows to be used in the `bind`, `set` or `unify` clauses.
    // * if provided, the update operation will be executed for every argument-row.
    // * see 'argument specs'

    "argRows": [ { "email": "james@example.com" } ],
  }
  // end::update-json[]

update-json-ex1: |
  // tag::update-json-ex1[]
  {
    "update": "users",
    "bind": [ { "email": { "xt:param": "$email" } }, "version" ],
    "set": [ { "version": { "xt:call": "+", "args": [ { "xt:lvar": "version" }, 1 ] } } ],
    "argRows": [ { "email": "james@example.com" } ],
  }
  // end::update-json-ex1[]

delete-json: |
  // tag::delete-json[]
  {
    // -- required

    // table to delete from
    "deleteFrom": "users",

    // -- optional

    // the valid time period to delete the rows for
    // * see 'temporal filters'

    // "forValidTime": { "from" : "2024-01-01T00:00:00Z" },

    // select the documents to delete using binding constraints
    // * if not provided, will delete every document in the table
    // * see 'binding specs'
    // * may also bind extra logic variables for use in the `unify` clauses.

    "bind": [ { "email": "james@example.com" } ],

    // extra clauses to unify with (e.g. to join against another table)
    // * see 'unify' for more details.

    // "unify": [ ... ],

    // argument-rows to be used in the `bind` or `unify` clauses.
    // * if provided, the delete operation will be executed for every argument-row.
    // * see 'argument specs'

    // "argRows": [ { "email": "james@example.com" } ],
  }
  // end::delete-json[]

delete-json-ex1: |
  // tag::delete-json-ex1[]
  {
    "deleteFrom": "users",
    "bind": [ { "email": "james@example.com" } ]
  }
  // end::delete-json-ex1[]

delete-json-ex2: |
  // tag::delete-json-ex2[]
  {
    "deleteFrom": "posts",
    "bind": [ "authorId" ],
    "unify": [
      {
        "from": "authors",
        "bind": [ { "xt$id": { "xt:lvar": "authorId" } }, { "email": "james@example.com" } ]
      }
    ]
  }
  // end::delete-json-ex2[]

erase-json: |
  // tag::erase-json[]
  {
    // -- required

    // table to erase from
    "eraseFrom": "users",

    // -- optional

    // select the documents to erase using binding constraints
    // * if not provided, will erase every document in the table
    // * see 'binding specs'
    // * may also bind extra logic variables for use in the `unify` clauses.

    "bind": [ { "email": "james@example.com" } ],

    // extra clauses to unify with (e.g. to join against another table)
    // * see 'unify' for more details.

    // "unify": [ ... ],

    // argument-rows to be used in the `bind` or `unify` clauses.
    // * if provided, the erase operation will be executed for every argument-row.
    // * see 'argument specs'

    // "argRows": [ { "email": "james@example.com" } ],
  }
  // end::erase-json[]

erase-json-ex1: |
  // tag::erase-json-ex1[]
  {
    "eraseFrom": "users",
    "bind": [ { "email": { "xt:param": "$email" } } ],
    "argRows": [ { "email": "james@example.com" } ]
  }
  // end::erase-json-ex1[]

erase-json-ex2: |
  // tag::erase-json-ex2[]
  {
    "eraseFrom": "posts",
    "bind": [ "authorId" ],
    "unify": [
        {
          "from": "authors",
          "bind": [
            { "xt$id": { "xt:lvar": "authorId" } },
            { "email": { "xt:param": "$email" } }
          ]
        }
    ],
    "argRows": [ { "email": "james@example.com" } ]
  }
  // end::erase-json-ex2[]

assert-json: |
  // tag::assert-json[]
  {
    // -- required: one of `assertExists` or `assertNotExists`

    // XTQL query
    // for `assertExists` the transaction will roll back if the query returns zero rows
    "assertExists": [ ... ],

    // XTQL query
    // for `assertNotExists` the transaction will roll back if the query returns any rows
    "assertNotExists": [ ... ],

    // -- optional

    // argument-rows to be used in the query.
    // * if provided, the assert operation will be executed for every argument-row.
    // * see 'argument specs'
    "argRows": [ { "email": "james@example.com" } ]
  }
  // end::assert-json[]

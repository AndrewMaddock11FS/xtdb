openapi: 3.0.1
info:
  title: XTDB
servers:
  - url: /
components:
  schemas:
    # Please keep this sorted
    Aggregate:
      type: object
      properties:
        aggregate:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
    ArgRows:
      description: rows to be passed to a prepared SQL statement
      type: array
      items:
        type: array
        items:
          $ref: '#/components/schemas/TypedAny'
    AssertExists:
      description: assert that a query yields at least one row
      type: object
      properties:
        assertExists:
          $ref: '#/components/schemas/Query'
        argRows:
          type: array
          items:
            type: object
            additionalProperties:
              $ref: '#/components/schemas/TypedAny'
    AssertNotExists:
      description: assert that a query doesn't yield any rows
      type: object
      properties:
        assertNotExists:
          $ref: '#/components/schemas/Query'
        argRows:
          type: array
          items:
            type: object
    Basis:
      type: object
      nullable: true
      properties:
        currentTime:
          description: wall clock time for functions that require it (i.e. `(current-time)`)
          $ref: '#/components/schemas/Instant'
        afterTx:
          description: requires that the node has indexed at least the specified transaction
          $ref: '#/components/schemas/TransactionKey'
    Binding:
      description: Binding
      oneOf:
        - type: string
        - type: object
          properties:
            binding:
              type: string
            expr:
              $ref: '#/components/schemas/Expr'
    Call:
      type: object
      properties:
        call:
          type: string
        args:
          type: array
          items:
            $ref: '#/components/schemas/Expr'
        bind:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Binding'
    CallOp:
      description: call a transaction function
      type: object
      properties:
        fnId:
          $ref: '#/components/schemas/Id'
        args:
          type: array
          items:
            $ref: '#/components/schemas/TypedAny'
    DefaultTz:
      type: string
      example: "America/Los_Angeles"
    Delete:
      description: delete documents by query
      type: object
      properties:
        deleteFrom:
          $ref: '#/components/schemas/TableName'
        forValidTime:
          nullable: true
          $ref: '#/components/schemas/TemporalExtents'
        bind:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        unify:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/UnifyClause'
        argRows:
          type: array
          items:
            type: object
    DeleteDocs:
      description: delete documents by document-id
      type: object
      properties:
        deleteDocs:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        from:
          $ref: '#/components/schemas/TableName'
        validFrom:
          $ref: '#/components/schemas/Instant'
        validTo:
          $ref: '#/components/schemas/Instant'
    Document:
      description: Document
      type: object
      properties:
        xt$id:
          $ref: '#/components/schemas/Id'
      additionalProperties:
        $ref: '#/components/schemas/TypedAny'
    Duration:
      description: Duration (ISO8601)
      type: string
    Erase:
      description: erase documents by query
      type: object
      properties:
        eraseFrom:
          $ref: '#/components/schemas/TableName'
        bind:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        unify:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/UnifyClause'
        argRows:
          type: array
          items:
            type: object
    EraseDocs:
      description: erase documents by document-id
      type: object
      properties:
        eraseDocs:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        from:
          $ref: '#/components/schemas/TableName'
    Error:
      type: object
      properties:
        xtdb.error/error-type:
          type: string
          example: "illegal-argument"
        xtdb.error/error-key:
          type: string
          example: "xtql/malformed-table"
        message:
          type: string
          example: "Illegal argument: ':xtql/malformed-table'"
    Expr:
      description: expression
      oneOf:
        - type: boolean
        - type: string
        - type: number
        - type: object
          description: map expression
          additionalProperties:
            $ref: '#/components/schemas/Expr'
        - type: array
          description: array expression
          items:
            $ref: '#/components/schemas/Expr'
        - $ref: '#/components/schemas/ExprCall'
        - $ref: '#/components/schemas/ExprGet'
        - $ref: '#/components/schemas/ExprQuery'
        - $ref: '#/components/schemas/ExprExists'
        - $ref: '#/components/schemas/ExprPull'
        - $ref: '#/components/schemas/ExprPullMany'
        - $ref: '#/components/schemas/LogicVar'
        - $ref: '#/components/schemas/Param'
        - $ref: '#/components/schemas/ExprSet'
    ExprCall:
      description: call expression
      type: object
      properties:
        'xt:call':
          type: string
          description: function to call
        args:
          description: function arguments
          type: array
          items:
            $ref: '#/components/schemas/Expr'
    ExprExists:
      description: exists sub-query expression
      type: object
      properties:
        'xt:exist':
          $ref: '#/components/schemas/Query'
        args:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
    ExprGet:
      description: get-field expression
      type: object
      properties:
        'xt:get':
          $ref: '#/components/schemas/Expr'
        fields:
          type: string
    ExprPull:
      description: pull-one expression
      type: object
      properties:
        'xt:pull':
          $ref: '#/components/schemas/Query'
        args:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
    ExprPullMany:
      description: pull-many expression
      type: object
      properties:
        'xt:pullMany':
          $ref: '#/components/schemas/Query'
        args:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
    ExprQuery:
      description: scalar sub-query expression
      type: object
      properties:
        q:
          $ref: '#/components/schemas/Query'
        args:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
    ExprSet:
      description: set expression
      type: object
      properties:
        '@type':
          type: string
          const: xt:set
        '@value':
          type: array
          items:
            $ref: '#/components/schemas/Expr'
    From:
      description: "from operator"
      type: object
      properties:
        from:
          $ref: '#/components/schemas/TableName'
        bind:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        forValidTime:
          $ref: '#/components/schemas/TemporalFilter'
        forSystemTime:
          $ref: '#/components/schemas/TemporalFilter'
        projectAllColumns:
          type: boolean
    Id:
      description: entity id
      oneOf:
        - $ref: '#/components/schemas/UUID'
        - type: string
        - type: integer
        - $ref: '#/components/schemas/TypedKeyword'
    Insert:
      description: insert documents by query
      type: object
      properties:
        insertInto:
          $ref: '#/components/schemas/TableName'
        query:
          $ref: '#/components/schemas/Query'
        argRows:
          type: array
          items:
            type: object
    Instant:
      type: string
      example: "2024-01-01T00:00Z"
      format: date-time
    Join:
      description: join operator
      type: object
      properties:
        join:
          $ref: '#/components/schemas/Query'
        args:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        bind:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Binding'
    Limit:
      description: limit operator
      type: object
      properties:
        limit:
          type: integer
    LeftJoin:
      description: left-join operator
      type: object
      properties:
        join:
          $ref: '#/components/schemas/Query'
        args:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        bind:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Binding'
    LogicVar:
      description: logical variable
      type: object
      properties:
        'xt:lvar':
          type: string
          example: "xt$id"
    Offset:
      description: offset operator
      type: object
      properties:
        offset:
          type: integer
    OrderBy:
      description: order-by operator
      type: object
      properties:
        orderBy:
          type: array
          items:
            $ref: '#/components/schemas/OrderSpec'
    OrderDirection:
      description: order direction
      type: string
      enum: [asc, desc]
    OrderNulls:
      type: string
      enum: [first, last]
    OrderSpec:
      type: object
      properties:
        expr:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        direction:
          $ref: '#/components/schemas/OrderDirection'
        nulls:
          $ref: '#/components/schemas/OrderNulls'
    Param:
      description: param expression
      type: object
      properties:
        'xt:param':
          type: string
          example: "$myXtId"
    Pipeline:
      description: pipeline operator
      type: array
      items:
        # TODO positional array types
        oneOf:
          - $ref: '#/components/schemas/Query'
          - $ref: '#/components/schemas/QueryTail'
    PutDocs:
      description: put documents
      type: object
      properties:
        putDocs:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        from:
          $ref: '#/components/schemas/TableName'
        validFrom:
          $ref: '#/components/schemas/Instant'
        validTo:
          $ref: '#/components/schemas/Instant'
    Query:
      description: An XTQL query
      oneOf:
        - $ref: '#/components/schemas/From'
        - $ref: '#/components/schemas/Pipeline'
        - $ref: '#/components/schemas/Relation'
        - $ref: '#/components/schemas/Unify'
        - $ref: '#/components/schemas/UnionAll'
    QueryOpts:
      description: |
        Options for a XTQL or SQL query
        
        Please also see [XTQL options](https://docs.xtdb.com/reference/main/xtql/queries.html#_query_options)
      type: object
      properties:
        args:
          description: a map of arguments to pass to the query.
          oneOf:
            - type: array
              items:
                $ref: '#/components/schemas/TypedAny'
            - type: object
              additionalProperties:
                $ref: '#/components/schemas/TypedAny'
        basis:
          $ref: '#/components/schemas/Basis'
        afterTx:
          description: requires that the node has indexed at least the specified transaction.
          $ref: '#/components/schemas/TransactionKey'
          nullable: true
        defaultTz:
          description: the default timezone to use in functions that require it.
          $ref: '#/components/schemas/DefaultTz'
        explain:
          description: rather than returning results, setting this flag to true returns the query plan for the query
          type: boolean
        keyFn:
          description: specifies how keys are returned in query results.
          type: string
          enum:
            - "CAMEL_CASE_STRING"
            - "SNAKE_CASE_STRING"
            - "KEBAB_CASE_STRING"
        txTimeout:
          description: duration to wait for the requested transactions (atTx, afterTx) to be indexed before timing out (default unlimited).
          $ref: '#/components/schemas/Duration'
    QueryRequest:
      title: query request
      required:
        - query
      type: object
      properties:
        query:
          oneOf:
            - $ref: '#/components/schemas/Query'
            - $ref: '#/components/schemas/SqlQuery'
        queryOpts:
          $ref: '#/components/schemas/QueryOpts'
    QueryTail:
      oneOf:
        - $ref: '#/components/schemas/Aggregate'
        - $ref: '#/components/schemas/Limit'
        - $ref: '#/components/schemas/Offset'
        - $ref: '#/components/schemas/OrderBy'
        - $ref: '#/components/schemas/Return'
        - $ref: '#/components/schemas/Unnest'
        - $ref: '#/components/schemas/Where'
        - $ref: '#/components/schemas/With'
        - $ref: '#/components/schemas/Without'
    Relation:
      description: relation operator
      type: object
      properties:
        rel:
          oneOf:
            - $ref: '#/components/schemas/Param'
            - description: literal relation
              type: array
              items:
                $ref: '#/components/schemas/Document'
        bind:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
    Return:
      description: return operator
      type: object
      properties:
        return:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
    Sql:
      description: sql transaction operation
      type: object
      properties:
        sql:
          type: string
          description: A SQL operation
          example: "INSERT INTO docs(xt$id, name) VALUES (1, 'Turing')"
        argRows:
          $ref: '#/components/schemas/ArgRows'
    SqlQuery:
      description: An SQL query
      type: object
      properties:
        sql:
          type: string
    Status:
      type: object
      properties:
        latestCompletedTx:
          $ref: '#/components/schemas/TransactionKey'
        latestSubmittedTx:
          $ref: '#/components/schemas/TransactionKey'
    TableName:
      type: string
      example: "docs"
      description: table name
    TransactionKey:
      type: object
      properties:
        txId:
          type: integer
        systemTime:
          $ref: '#/components/schemas/Instant'
    TemporalExtents:
      oneOf:
        - type: string
          const: allTime
        - type: object
          properties:
            from:
              nullable: true
              $ref: '#/components/schemas/Instant'
            to:
              nullable: true
              $ref: '#/components/schemas/Instant'
    TemporalFilter:
      oneOf:
        - type: string
          const: allTime
        - type: object
          properties:
            at:
              $ref: '#/components/schemas/Instant'
        - type: object
          properties:
            from:
              nullable: true
              $ref: '#/components/schemas/Instant'
            to:
              nullable: true
              $ref: '#/components/schemas/Instant'
    TxOp:
      description: transaction operations
      oneOf:
        - $ref: '#/components/schemas/PutDocs'
        - $ref: '#/components/schemas/DeleteDocs'
        - $ref: '#/components/schemas/EraseDocs'
        - $ref: '#/components/schemas/Sql'
        - $ref: '#/components/schemas/CallOp'
        - $ref: '#/components/schemas/Insert'
        - $ref: '#/components/schemas/Update'
        - $ref: '#/components/schemas/Delete'
        - $ref: '#/components/schemas/Erase'
        - $ref: '#/components/schemas/AssertExists'
        - $ref: '#/components/schemas/AssertNotExists'
    TxOptions:
      title: transaction options
      properties:
        systemTime:
          $ref: '#/components/schemas/Instant'
        defaultTz:
          $ref: '#/components/schemas/DefaultTz'
        default-all-valid-time?:
          type: boolean
    TxRequest:
      type: object
      required:
        - txOps
      properties:
        txOps:
          type: array
          items:
            $ref: '#/components/schemas/TxOp'
        opts:
          $ref: '#/components/schemas/TxOptions'
    TypedAny:
      description: |
        JSON-LD object

        Due to the inherent limitations in the native type system of JSON, our implementation leverages the JSON-LD
        format to encode a broader range of types. This approach primarily involves two key components:
        
        - '@type' Property: This field specifies the object's type, offering a clear description of the nature of the data being represented.
        - '@value' Property: This field is used to encapsulate the actual data corresponding to the type described in the @type property.
        
        By integrating these elements, JSON-LD enables a more flexible and descriptive representation of
        data types beyond the standard capabilities of JSON.
      oneOf:
        - type: string
        - type: integer
        - $ref: '#/components/schemas/TypedDuration'
        - $ref: '#/components/schemas/TypedInstant'
        - $ref: '#/components/schemas/TypedKeyword'
        - $ref: '#/components/schemas/TypedLocalDate'
        - $ref: '#/components/schemas/TypedLocalDateTime'
        - $ref: '#/components/schemas/TypedPeriod'
        - $ref: '#/components/schemas/TypedSet'
        - $ref: '#/components/schemas/TypedSymbol'
        - $ref: '#/components/schemas/TypedTimeZone'
        - $ref: '#/components/schemas/TypedZoneDateTime'
        - type: object
          description: a nested map
          additionalProperties:
            $ref: '#/components/schemas/TypedAny'
        - type: array
          description: an array/list type of XT
          items:
            $ref: '#/components/schemas/TypedAny'
    TypedDuration:
      description: A time-based amount of time, such as '34.5 seconds'.
      type: object
      properties:
        '@type':
          type: string
          const: xt:duration
        '@value':
          type: string
          example: "PT3H1M35.23S"
    TypedInstant:
      description: An instantaneous point on the time-line. An object where a simple string would be ambiguous.
      type: object
      properties:
        '@type':
          type: string
          const: xt:instant
        '@value':
          type: string
          example: "2024-01-01T00:00Z"
          format: date-time
    TypedKeyword:
      description: a keyword literal - See [Keyword](https://clojure.org/reference/data_structures#Keywords) for details.
      type: object
      properties:
        '@type':
          type: string
          const: xt:keyword
        '@value':
          type: string
    TypedLocalDate:
      description: A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03
      properties:
        '@type':
          type: string
          const: xt:date
        '@value':
          type: string
          example: "2024-01-01"
          format: date
    TypedLocalDateTime:
      description: A date-time without a time-zone in the ISO-8601 calendar system, such as 2007-12-03T10:15:30.
      properties:
        '@type':
          type: string
          const: xt:timestamp
        '@value':
          type: string
          example: "2020-01-01T12:34:56.789"
    TypedPeriod:
      description: A date-based amount of time in the ISO-8601 calendar system, such as '2 years, 3 months and 4 days'.
      properties:
        '@type':
          type: string
          const: xt:period
        '@value':
          type: string
          example: "P18Y12D"
    TypedSet:
      description: A set data literal.
      type: object
      properties:
        '@type':
          type: string
          const: xt:set
        '@value':
          type: array
          items:
            $ref: '#/components/schemas/TypedAny'
    TypedSymbol:
      description: A symbol literal - See [Symbol](https://clojure.org/reference/data_structures#Symbols) for details.
      type: object
      properties:
        '@type':
          type: string
          const: xt:symbol
        '@value':
          type: string
    TypedTimeZone:
      description: A time-zone ID, such as Europe/Paris.
      type: object
      properties:
        '@type':
          type: string
          const: xt:timeZone
        '@value':
          type: string
          example: "2020-01-01T12:34:56.789[Europe/Paris]"
    TypedZoneDateTime:
      description: A date-time with a time-zone in the ISO-8601 calendar system, such as 2007-12-03T10:15:30+01:00 Europe/Paris.
      type: object
      properties:
        '@type':
          type: string
          const: xt:timestamptz
        '@value':
          type: string
          example: "2020-01-01T12:34:56.789[Europe/Paris]"
    Unify:
      description: unify operator
      type: object
      properties:
        unify:
          type: array
          items:
            $ref: '#/components/schemas/UnifyClause'
    UnifyClause:
      description: unify clause
      oneOf:
        - $ref: '#/components/schemas/Call'
        - $ref: '#/components/schemas/From'
        - $ref: '#/components/schemas/Join'
        - $ref: '#/components/schemas/LeftJoin'
        - $ref: '#/components/schemas/Relation'
        - $ref: '#/components/schemas/Unnest'
        - $ref: '#/components/schemas/Where'
        - $ref: '#/components/schemas/With'
    UnionAll:
      description: union-all operator
      type: object
      properties:
        unionAll:
          type: array
          items:
            $ref: '#/components/schemas/Query'
    Unnest:
      description: unnest operator
      type: object
      properties:
        var:
          $ref: '#/components/schemas/Binding'
    Update:
      description: update documents by query
      type: object
      properties:
        update:
          $ref: '#/components/schemas/TableName'
        set:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        forValidTime:
          nullable: true
          $ref: '#/components/schemas/TemporalExtents'
        bind:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        unify:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/UnifyClause'
        argRows:
          type: array
          items:
            type: object
    UUID:
      type: string
      format: uuid
    Where:
      description: where clause
      type: object
      properties:
        where:
          type: array
          items:
            $ref: '#/components/schemas/Expr'
    With:
      description: with clause
      type: object
      properties:
        with:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
    Without:
      description: without operator
      type: object
      properties:
        with:
          type: array
          items:
            type: string
paths:
  /status:
    get:
      summary: Status
      description: Get status information from the node
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /tx:
    post:
      summary: Transaction
      description: |
        Submits a transaction to the cluster. 
        
        See [XTQL Transactions](https://docs.xtdb.com/reference/main/xtql/txs) for details about different XT transaction operations. 
        
        See [SQL Transactions](https://docs.xtdb.com/reference/main/sql/txs) for details about different SQL transaction operations.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TxRequest'
        required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionKey'
        400:
          description: A validation error, parsing error or runtime error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error. An unknown error occurred server side.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /query:
    post:
      summary: Query
      description: |
        Submits a query to the cluster.
        
        See [XTQL queries](https://docs.xtdb.com/reference/main/xtql/queries) for details about how to construct queries.
        
        See [SQL queries](https://docs.xtdb.com/reference/main/sql/queries) for details about SQL queries.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        required: true
      responses:
        200:
          description: Ok
          content:
            application/jsonl:
              schema:
                $ref: '#/components/schemas/Document'
        400:
          description: A validation error, parsing error or runtime error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error. An unknown error occurred server side.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

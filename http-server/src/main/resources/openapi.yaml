openapi: 3.0.1
info:
  title: XTDB
servers:
  - url: /
components:
  schemas:
    # Please keep this sorted
    Aggregate:
      type: object
      properties:
        aggregate:
          $ref: '#/components/schemas/Bindings'
    Any:
      oneOf:
        - type: string
        - type: integer
        - type: object
    ArgRows:
      description: rows to be passed to a prepared SQL statement
      type: array
      items:
        type: array
        items:
          schema:
            $ref: '#/components/schemas/Any'
    Args:
      type: array
      items:
        schema:
          $ref: '#/components/schemas/Any'
    AssertExists:
      type: object
      properties:
        assertExists:
          $ref: '#/components/schemas/Query'
        argRows:
          type: array
          items:
            type: object
    AssertNotExists:
      type: object
      properties:
        assertNotExists:
          $ref: '#/components/schemas/Query'
        argRows:
          type: array
          items:
            type: object
    Basis:
      type: object
      nullable: true
      properties:
        currentTime:
          description: wall clock time for functions that require it (i.e. `(current-time)`)
          $ref: '#/components/schemas/Instant'
        afterTx:
          description: requires that the node has indexed at least the specified transaction
          schema:
            $ref: '#/components/schemas/TransactionKey'
    Binding:
      oneOf:
        - type: string
        - type: object
          properties:
            binding:
              - type: string
            expr:
              $ref: '#/components/schemas/Expr'
    Bindings:
      type: array
      items:
        $ref: '#/components/schemas/Binding'
    Call:
      type: object
      properties:
        call:
          type: string
        args:
          $ref: '#/components/schemas/ExprList'
        bind:
          nullable: true
          $ref: '#/components/schemas/Bindings'
    CallOp:
      description: a transaction function call
      type: object
      properties:
        fnId:
          schema:
            $ref: '#/components/schemas/Id'
        args:
          schema:
            $ref: '#/components/schemas/Args'
    DefaultTz:
      type: string
      example: "America/Los_Angeles"
    Delete:
      type: object
      properties:
        deleteFrom:
          $ref: '#/components/schemas/TableName'
        forValidTime:
          nullable: true
          $ref: '#/components/schemas/TemporalExtents'
        bind:
          nullable: true
          $ref: '#/components/schemas/Bindings'
        unify:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/UnifyClause'
        argRows:
          type: array
          items:
            type: object
    DeleteDocs:
      description: delete transaction operation
      type: object
      properties:
        deleteDocs:
          type: array
          items:
            schema:
              $ref: '#/components/schemas/Id'
        from:
          schema:
            $ref: '#/components/schemas/TableName'
        validFrom:
          schema:
            $ref: '#/components/schemas/Instant'
        validTo:
          schema:
            $ref: '#/components/schemas/Instant'
    Document:
      description: a document to be added to the db
      type: object
      additionalProperties:
        schema:
          $ref: '#/components/schemas/Any'
    Duration:
      description: duration in milliseconds
      type: integer
    Erase:
      type: object
      properties:
        eraseFrom:
          $ref: '#/components/schemas/TableName'
        bind:
          nullable: true
          $ref: '#/components/schemas/Bindings'
        unify:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/UnifyClause'
        argRows:
          type: array
          items:
            type: object
    EraseDocs:
      description: erase transaction operation
      type: object
      properties:
        eraseDocs:
          type: array
          items:
            schema:
              $ref: '#/components/schemas/Id'
        from:
          schema:
            $ref: '#/components/schemas/TableName'
    Error:
      type: object
      properties:
        xtdb.error/error-type:
          type: string
          example: "illegal-argument"
        xtdb.error/error-key:
          type: string
          example: "xtql/malformed-table"
        message:
          type: string
          example: "Illegal argument: ':xtql/malformed-table'"
    Expr:
      oneOf:
        - type: boolean
        - type: string
        - type: number
        - type: object
        - type: array
          items:
            $ref: '#/components/schemas/Expr'
        - $ref: '#/components/schemas/ExprCall'
        - $ref: '#/components/schemas/ExprGet'
        - $ref: '#/components/schemas/ExprQuery'
        - $ref: '#/components/schemas/ExprExists'
        - $ref: '#/components/schemas/ExprPull'
        - $ref: '#/components/schemas/ExprPullMany'
        - $ref: '#/components/schemas/LogicVar'
        - $ref: '#/components/schemas/Param'
        - $ref: '#/components/schemas/ExprSet'
    ExprCall:
      type: object
      properties:
        'xt:call':
          type: string
        args:
          type: array
          items:
            $ref: '#/components/schemas/Expr'
    ExprExists:
      type: object
      properties:
        'xt:exist':
          $ref: '#/components/schemas/Query'
        args:
          $ref: '#/components/schemas/Bindings'
    ExprGet:
      type: object
      properties:
        'xt:get':
          $ref: '#/components/schemas/Expr'
        fields:
          type: string
    ExprList:
      type: array
      items:
        $ref: '#/components/schemas/Expr'
    ExprPull:
      type: object
      properties:
        'xt:pull':
          $ref: '#/components/schemas/Query'
        args:
          $ref: '#/components/schemas/Bindings'
    ExprPullMany:
      type: object
      properties:
        'xt:pullMany':
          $ref: '#/components/schemas/Query'
        args:
          $ref: '#/components/schemas/Bindings'
    ExprQuery:
      type: object
      properties:
        q:
          $ref: '#/components/schemas/Query'
        args:
          $ref: '#/components/schemas/Bindings'
    ExprSet:
      type: object
      properties:
        '@type':
          type: string
          enum: [xt:set]
        '@value':
          type: array
          items:
            $ref: '#/components/schemas/Expr'
    From:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/TableName'
        bind:
          $ref: '#/components/schemas/Bindings'
        forValidTime:
          $ref: '#/components/schemas/TemporalFilter'
        forSystemTime:
          $ref: '#/components/schemas/TemporalFilter'
        projectAllColumns:
          type: boolean
    Id:
      description: A XTDB entity id
      oneOf:
        - type: string
        - type: integer
        - schema:
            $ref: '#/components/schemas/UUID'
    Insert:
      type: object
      properties:
        insertInto:
          $ref: '#/components/schemas/TableName'
        query:
          $ref: '#/components/schemas/Query'
        argRows:
          type: array
          items:
            type: object
    Instant:
      type: string
      example: "2024-01-01T00:00Z"
      format: date-time
    Join:
      type: object
      properties:
        join:
          $ref: '#/components/schemas/Query'
        args:
          nullable: true
          $ref: '#/components/schemas/Bindings'
        bind:
          nullable: true
          $ref: '#/components/schemas/Bindings'
    Limit:
      type: object
      properties:
        limit:
          type: integer
    LeftJoin:
      type: object
      properties:
        join:
          $ref: '#/components/schemas/Query'
        args:
          nullable: true
          $ref: '#/components/schemas/Bindings'
        bind:
          nullable: true
          $ref: '#/components/schemas/Bindings'
    LogicVar:
      type: object
      properties:
        '@type':
          type: string
          enum: [xt:lvar]
        '@value':
          type: string
    Offset:
      type: object
      properties:
        limit:
          type: integer
    OrderBy:
      type: object
      properties:
        orderBy:
          type: array
          items:
            $ref: '#/components/schemas/OrderSpec'
    OrderDirection:
      type: string
      enum: [asc, desc]
    OrderNulls:
      type: string
      enum: [first, last]
    OrderSpec:
      type: object
      properties:
        expr:
          $ref: '#/components/schemas/Bindings'
        direction:
          $ref: '#/components/schemas/OrderDirection'
        nulls:
          $ref: '#/components/schemas/OrderNulls'
    Param:
      type: object
      properties:
        '@type':
          type: string
          enum: [xt:param]
        '@value':
          type: string
    Pipeline:
      type: array
      items:
        # TODO positional array types
        oneOf:
          - $ref: '#/components/schemas/Query'
          - $ref: '#/components/schemas/QueryTail'
    PutDocs:
      description: put transaction operation
      type: object
      properties:
        putDocs:
          type: array
          items:
            schema:
            $ref: '#/components/schemas/Document'
        from:
          $ref: '#/components/schemas/TableName'
        validFrom:
          $ref: '#/components/schemas/Instant'
        validTo:
          $ref: '#/components/schemas/Instant'
    Query:
      description: A XTQL query
      oneOf:
        - $ref: '#/components/schemas/From'
        - $ref: '#/components/schemas/Pipeline'
        - $ref: '#/components/schemas/Relation'
        - $ref: '#/components/schemas/SqlQuery'
        - $ref: '#/components/schemas/Unify'
        - $ref: '#/components/schemas/UnionAll'
    QueryOpts:
      description: |
        Options for a XTQL or SQL query
        
        Please also see [XTQL options](https://docs.xtdb.com/reference/main/xtql/queries.html#_query_options)
      type: object
      properties:
        args:
          description: a map of arguments to pass to the query.
          $ref: '#/components/schemas/Args'
        basis:
          $ref: '#/components/schemas/Basis'
        afterTx:
          description: requires that the node has indexed at least the specified transaction.
          $ref: '#/components/schemas/TransactionKey'
          nullable: true
        defaultTz:
          description: the default timezone to use in functions that require it.
          $ref: '#/components/schemas/DefaultTz'
        explain:
          description: rather than returning results, setting this flag to true returns the query plan for the query
          type: boolean
        keyFn:
          description: specifies how keys are returned in query results.
          example: "SQL_STR"
          type: string
        txTimeout:
          description: duration to wait for the requested transactions (atTx, afterTx) to be indexed before timing out (default unlimited).
          $ref: '#/components/schemas/Duration'
    QueryRequest:
      title: query request
      required:
        - query
      type: object
      properties:
        query:
          $ref: '#/components/schemas/Query'
        queryOpts:
          $ref: '#/components/schemas/QueryOpts'
    QueryTail:
      oneOf:
        - $ref: '#/components/schemas/Aggregate'
        - $ref: '#/components/schemas/Limit'
        - $ref: '#/components/schemas/Offset'
        - $ref: '#/components/schemas/OrderBy'
        - $ref: '#/components/schemas/Return'
        - $ref: '#/components/schemas/Unnest'
        - $ref: '#/components/schemas/Where'
        - $ref: '#/components/schemas/With'
        - $ref: '#/components/schemas/Without'
    Relation:
      type: object
      properties:
        rel:
          oneOf:
            - $ref: '#/components/schemas/Param'
            - type: array
              items:
                $ref: '#/components/schemas/Document'
        bind:
          - $ref: '#/components/schemas/Bindings'
    Return:
      type: object
      properties:
        return:
          $ref: '#/components/schemas/Bindings'
    Sql:
      description: sql transaction operation
      type: object
      properties:
        sql:
          type: string
          description: A SQL operation
          example: "INSERT INTO docs(xt$id, name) VALUES (1, 'Turing')"
        argRows:
          schema:
            $ref: '#/components/schemas/ArgRows'
    SqlQuery:
      type: object
      properties:
        sql:
          type: string
    Status:
      type: object
      properties:
        latestCompletedTx:
          $ref: '#/components/schemas/TransactionKey'
        latestSubmittedTx:
          $ref: '#/components/schemas/TransactionKey'
    TableName:
      type: string
      example: "docs"
      description: tabel name
    TransactionKey:
      type: object
      properties:
        txId:
          type: integer
        systemTime:
          $ref: '#/components/schemas/Instant'
    TemporalExtents:
      oneOf:
        - type: string
          enum: [allTime]
        - type: object
          properties:
            from:
              nullable: true
              $ref: '#/components/schemas/Instant'
            to:
              nullable: true
              $ref: '#/components/schemas/Instant'
    TemporalFilter:
      oneOf:
        - type: string
          enum: [allTime]
        - type: object
          properties:
            at:
              $ref: '#/components/schemas/Instant'
        - type: object
          properties:
            from:
              nullable: true
              $ref: '#/components/schemas/Instant'
            to:
              nullable: true
              $ref: '#/components/schemas/Instant'
    TxOp:
      description: an abstract transaction operation
      oneOf:
        - $ref: '#/components/schemas/PutDocs'
        - $ref: '#/components/schemas/DeleteDocs'
        - $ref: '#/components/schemas/EraseDocs'
        - $ref: '#/components/schemas/Sql'
        - $ref: '#/components/schemas/CallOp'
        - $ref: '#/components/schemas/Insert'
        - $ref: '#/components/schemas/Update'
        - $ref: '#/components/schemas/Delete'
        - $ref: '#/components/schemas/Erase'
        - $ref: '#/components/schemas/AssertExists'
        - $ref: '#/components/schemas/AssertNotExists'
    TxOptions:
      title: transaction options
      properties:
        systemTime:
          schema:
            $ref: '#/components/schemas/Instant'
        defaultTz:
          schema:
            $ref: '#/components/schemas/DefaultTz'
        default-all-valid-time?:
          type: boolean
    TxRequest:
      type: object
      required:
        - txOps
      properties:
        txOps:
          type: array
          items:
            $ref: '#/components/schemas/TxOp'
        opts:
          $ref: '#/components/schemas/TxOptions'
    Unify:
      type: object
      properties:
        unify:
          type: array
          items:
            $ref: '#/components/schemas/UnifyClause'
    UnifyClause:
      oneOf:
        - $ref: '#/components/schemas/Call'
        - $ref: '#/components/schemas/From'
        - $ref: '#/components/schemas/Join'
        - $ref: '#/components/schemas/LeftJoin'
        - $ref: '#/components/schemas/Relation'
        - $ref: '#/components/schemas/Unnest'
        - $ref: '#/components/schemas/Where'
        - $ref: '#/components/schemas/With'
    UnionAll:
      type: object
      properties:
        unionAll:
          type: array
          items:
            $ref: '#/components/schemas/Query'
    Unnest:
      type: object
      properties:
        var:
          $ref: '#/components/schemas/Binding'
    Update:
      type: object
      properties:
        update:
          $ref: '#/components/schemas/TableName'
        set:
          $ref: '#/components/schemas/Bindings'
        forValidTime:
          nullable: true
          $ref: '#/components/schemas/TemporalExtents'
        bind:
          nullable: true
          $ref: '#/components/schemas/Bindings'
        unify:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/UnifyClause'
        argRows:
          type: array
          items:
            type: object
    UUID:
      type: string
      format: uuid
    Where:
      type: object
      properties:
        where:
          type: array
          items:
            $ref: '#/components/schemas/Expr'
    With:
      type: object
      properties:
        with:
          $ref: '#/components/schemas/Bindings'
    Without:
      type: object
      properties:
        with:
          type: array
          items:
            type: string
paths:
  /status:
    get:
      summary: Status
      description: Get status information from the node
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/Status'
  /tx:
    post:
      summary: Transaction
      description: |
        Submits a transaction to the cluster. 
        
        See [XTQL Transactions](https://docs.xtdb.com/reference/main/xtql/txs) for details about different XT transaction operations. 
        
        See [SQL Transactions](https://docs.xtdb.com/reference/main/sql/txs) for details about different SQL transaction operations.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TxRequest'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/TxRequest'
        required: true
      responses:
        200:
          description: Ok
          content:
            application/transit+json:
              schema:
                $ref: '#/components/schemas/TransactionKey'
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionKey'
        400:
          description: A validation error, parsing error or runtime error occurred.
          content:
            application/transit+json:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error. An unknown error occurred server side.
          content:
            application/transit+json:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /query:
    post:
      summary: Query
      description: |
        Submits a query to the cluster.
        
        See [XTQL queries](https://docs.xtdb.com/reference/main/xtql/queries) for details about how to construct queries.
        
        See [SQL queries](https://docs.xtdb.com/reference/main/sql/queries) for details about SQL queries.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
          application/transit+json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        required: true
      responses:
        200:
          description: Ok
          content:
            application/jsonl:
              schema:
                $ref: '#/components/schemas/Document'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/Document'
        400:
          description: A validation error, parsing error or runtime error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error. An unknown error occurred server side.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/transit+json:
              schema:
                $ref: '#/components/schemas/Error'
